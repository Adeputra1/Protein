apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'

// define enableGoogleServicesPlugin=false in local.properties
// this property is only used for product flavor play
def enableGoogleServicesPlugin = getLocalProperty('enableGoogleServicesPlugin', 'false').toBoolean()

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    defaultConfig {
        applicationId "com.ge.protein"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 2
        versionName "1.1"
        archivesBaseName = "protein-${versionName}"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    flavorDimensions "default"

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "Protein"]
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
            manifestPlaceholders = [appName: "Protein debug"]
        }
    }

    productFlavors {
        open {
            // dribbble properties placed in dribbble_config_open.properties
            buildConfigField('String', 'DRIBBBLE_CLIENT_ID', getDribbbleConfigs('dribbble_config_open.properties', 'CLIENT_ID'))
            buildConfigField('String', 'DRIBBBLE_CLIENT_SECRET', getDribbbleConfigs('dribbble_config_open.properties', 'CLIENT_SECRET'))
            buildConfigField('String', 'DRIBBBLE_CLIENT_ACCESS_TOKEN', getDribbbleConfigs('dribbble_config_open.properties', 'CLIENT_ACCESS_TOKEN'))
        }
        play {
            // dribbble properties placed in dribbble_config_play.properties
            buildConfigField('String', 'DRIBBBLE_CLIENT_ID', getDribbbleConfigs('dribbble_config_play.properties', 'CLIENT_ID'))
            buildConfigField('String', 'DRIBBBLE_CLIENT_SECRET', getDribbbleConfigs('dribbble_config_play.properties', 'CLIENT_SECRET'))
            buildConfigField('String', 'DRIBBBLE_CLIENT_ACCESS_TOKEN', getDribbbleConfigs('dribbble_config_play.properties', 'CLIENT_ACCESS_TOKEN'))
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

}

def getDribbbleConfigs(configFile, name) {
    Properties props = new Properties()
    try {
        props.load(new FileInputStream(new File(configFile)))
    } catch (Exception e) {
        return ''
    }
    return props[name]
}

ext.supportLibVersion = '26.0.0-beta2'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Test
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"
    androidTestCompile 'com.google.code.findbugs:jsr305:3.0.1'

    // Android support library
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:palette-v7:${supportLibVersion}"

    // Network and data
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'com.google.code.gson:gson:2.8'
    compile 'com.google.auto.value:auto-value:1.2'
    annotationProcessor 'com.google.auto.value:auto-value:1.2'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
    compile 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    annotationProcessor 'com.gabrielittner.auto.value:auto-value-with:1.0.0'

    // ReactiveX
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'com.trello.rxlifecycle2:rxlifecycle:2.0.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-android:2.0.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.0.1'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'

    // UI
    compile 'com.github.bumptech.glide:glide:3.8.0'
    compile('com.ge.droid:mdlicense:0.3.1') {
        exclude group: 'com.android.support'
    }
    compile 'com.airbnb.android:epoxy:2.1.0'
    annotationProcessor 'com.airbnb.android:epoxy-processor:2.1.0'

    // Firebase
    playCompile 'com.google.firebase:firebase-core:10.2.0'
    playCompile 'com.google.firebase:firebase-crash:10.2.0'

    // Others
    compile 'com.facebook.stetho:stetho:1.5.0'
    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    compile 'com.airbnb:deeplinkdispatch:3.1.0'
    annotationProcessor 'com.airbnb:deeplinkdispatch-processor:3.1.0'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
}

// only apply Google services plugin for flavor play to use Firebase
if (enableGoogleServicesPlugin) {
    apply plugin: 'com.google.gms.google-services'
}

